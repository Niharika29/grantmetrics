<?php
/**
 * This file contains only the EventController class.
 */

namespace AppBundle\Controller;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\TimezoneType;
use Symfony\Component\Form\CallbackTransformer;
use Symfony\Component\Form\Form;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\Form\FormError;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Constraints\Valid;
use AppBundle\Model\Event;
use AppBundle\Model\EventWiki;
use AppBundle\Model\Program;
use AppBundle\Repository\EventWikiRepository;

/**
 * The EventController handles showing, creating and editing events.
 */
class EventController extends Controller
{
    /**
     * There is no list of events without a program to go with it.
     * @Route("/events", name="Events")
     * @Route("/events/", name="EventsSlash")
     * @return RedirectResponse
     */
    public function indexAction()
    {
        return new RedirectResponse($this->generateUrl('Programs'));
    }

    /**
     * Show a form to create a new event.
     * @Route("/programs/{programTitle}/new", name="NewEvent")
     * @Route("/programs/{programTitle}/new/", name="NewEventSlash")
     * @param Request $request The request object generated by Symfony.
     * @param string $programTitle Title of the program.
     * @return Response|RedirectResponse
     */
    public function newAction(Request $request, $programTitle)
    {
        $em = $this->container->get('doctrine')->getManager();
        $program = $em->getRepository(Program::class)
            ->findOneBy(['title' => $programTitle]);
        $event = new Event($program);
        $eventWiki = new EventWiki($event);
        $event->addWiki($eventWiki);

        // Handle the Form for the request, and redirect if they submitted.
        $form = $this->handleFormSubmission($request, $event);
        if ($form instanceof RedirectResponse) {
            // Flash message will be shown at the top of the page.
            $this->addFlash('success', /** @scrutinizer ignore-type */ [
                'event-created',
                $event->getDisplayTitle(),
            ]);
            return $form;
        }

        return $this->render('events/new.html.twig', [
            'form' => $form->createView(),
            'event' => $event,
            'gmTitle' => 'create-new-program',
        ]);
    }
    /**
     * Show a form to edit the given event.
     * @Route("/programs/{programTitle}/edit/{title}", name="EditEvent")
     * @Route("/programs/{programTitle}/edit/{title}/", name="EditEventSlash")
     * @param Request $request The request object generated by Symfony.
     * @param string $title Title of the event.
     * @return Response|RedirectResponse
     */
    public function editAction(Request $request, $title)
    {
        $em = $this->container->get('doctrine')->getManager();
        $event = $em->getRepository(Event::class)
            ->findOneBy(['title' => $title]);

        // Add blank EventWiki in the form if one doesn't already exist.
        if (count($event->getWikis()) === 0) {
            $eventWiki = new EventWiki($event);
            $event->addWiki($eventWiki);
        }

        // Handle the Form for the request, and redirect if they submitted.
        $form = $this->handleFormSubmission($request, $event);
        if ($form instanceof RedirectResponse) {
            // Flash message will be shown at the top of the page.
            $this->addFlash('success', /** @scrutinizer ignore-type */ [
                'event-updated',
                $event->getDisplayTitle(),
            ]);
            return $form;
        }

        return $this->render('events/edit.html.twig', [
            'form' => $form->createView(),
            'event' => $event,
            'gmTitle' => $event->getDisplayTitle(),
        ]);
    }

    /**
     * Delete an event.
     * @Route("/programs/{programTitle}/delete/{title}", name="DeleteEvent")
     * @Route("/programs/{programTitle}/delete/{title}/", name="DeleteEventSlash")
     * @param  string $title
     * @return RedirectResponse
     */
    public function deleteAction($title)
    {
        $em = $this->container->get('doctrine')->getManager();
        $event = $em->getRepository(Event::class)
            ->findOneBy(['title' => $title]);

        // Flash message will be shown at the top of the page.
        $this->addFlash('danger', /** @scrutinizer ignore-type */ [
            'event-deleted',
            $event->getDisplayTitle(),
        ]);

        $em->remove($event);
        $em->flush();

        return $this->redirectToRoute('Program', [
            'title' => $event->getProgram()->getTitle(),
        ]);
    }

    /**
     * Handle creation or updating of an Event on form submission.
     * @param  Request $request The request object generated by Symfony.
     * @param  Event $event
     * @return Form|RedirectResponse
     */
    private function handleFormSubmission(Request $request, Event $event)
    {
        $form = $this->getFormForEvent($event);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $event = $form->getData();
            $em = $this->container->get('doctrine')->getManager();
            $em->persist($event);
            $em->flush();

            return $this->redirectToRoute('Program', [
                'title' => $event->getProgram()->getTitle(),
            ]);
        } elseif ($form->isSubmitted() && !$form->isValid()) {
            $this->handleEvenetWikiErrors($form);
        }

        return $form;
    }

    /**
     * Consolidate errors of wikis associated with the event.
     * @param  Form $form
     */
    private function handleEvenetWikiErrors(Form $form)
    {
        $numWikiErrors = count($form['wikis']->getErrors(true));
        if ($numWikiErrors > 0) {
            $form->addError(new FormError(
                // For the model-level, doesn't actually get rendered in the view.
                "$numWikiErrors wikis are invalid",
                // i18n arguments.
                'error-wikis',
                [$numWikiErrors]
            ));
        }
    }

    /**
     * Build a form for the given event.
     * @param  Event $event
     * @return Form
     */
    private function getFormForEvent(Event $event)
    {
        $builder = $this->createFormBuilder($event)
            ->add('title', TextType::class, [
                'constraints' => [
                    new NotBlank(),
                ]
            ])
            ->add('wikis', CollectionType::class, [
                'entry_type' => TextType::class,
                'allow_add' => true,
                'allow_delete' => true,
                'delete_empty' => true,
                'empty_data' => '',
                'required' => false,
                'constraints' => [new Valid()],
            ])
            ->add('enableTime', CheckboxType::class, [
                'mapped' => false,
                'required' => false,
                'data' => $event->hasDates(),
            ])
            ->add('start', DateTimeType::class, [
                'date_widget' => 'single_text',
                'time_widget' => 'single_text',
                'required' => false,
            ])
            ->add('end', DateTimeType::class, [
                'date_widget' => 'single_text',
                'time_widget' => 'single_text',
                'required' => false,
            ])
            ->add('timezone', TimezoneType::class)
            ->add('submit', SubmitType::class)
            ->addEventListener(FormEvents::PRE_SUBMIT, function (FormEvent $formEvent) {
                $event = $formEvent->getData();
                $form = $formEvent->getForm();

                if (!isset($event['enableTime'])) {
                    unset($event['start']);
                    unset($event['end']);
                    $formEvent->setData($event);
                }
            });

        $builder->get('wikis')
            ->addModelTransformer($this->getWikiCallbackTransformer($event));

        return $builder->getForm();
    }

    /**
     * Transform wiki data to or from the form.
     * @param Event $event
     * @return CallbackTransformer
     */
    private function getWikiCallbackTransformer(Event $event)
    {
        $em = $this->container->get('doctrine')->getManager();
        $eventWikiRepo = new EventWikiRepository($em);
        $eventWikiRepo->setContainer($this->container);

        return new CallbackTransformer(
            function ($wikiObjects) {
                $wikis = $wikiObjects->toArray();
                return array_map(function ($wiki) {
                    return $wiki->getDbName();
                }, $wikis);
            },
            function ($dbNames) use ($event, $eventWikiRepo) {
                return $this->normalizeEventWikis($dbNames, $event, $eventWikiRepo);
            }
        );
    }

    /**
     * Take the list of wikis provided by the user (enwiki, en.wikipedia, or en.wikipedia.org)
     * and normalize them to the database name (enwiki). This method also instantiates a new
     * EventWiki if one did not already exist.
     * @param  string[]            $wikis As retrieved by the form.
     * @param  Event               $event
     * @param  EventWikiRepository $eventWikiRepo
     * @return EventWiki[]
     */
    private function normalizeEventWikis($wikis, Event $event, EventWikiRepository $eventWikiRepo)
    {
        return array_map(function ($wiki) use ($event, $eventWikiRepo) {
            $normalized = $eventWikiRepo->getDbNameFromEventWikiInput($wiki);
            $eventWiki = $eventWikiRepo->findOneBy([
                'event' => $event,
                'dbName' => $normalized,
            ]);

            if ($eventWiki === null) {
                $eventWiki = new EventWiki($event, $normalized);
            }

            return $eventWiki;
        }, $wikis);
    }
}
